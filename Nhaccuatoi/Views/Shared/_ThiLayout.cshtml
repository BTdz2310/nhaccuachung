@{
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@inject IHttpContextAccessor HttpContextAccessor

<div class="min-h-screen relative bg-[#101010] pt-[54px] flex items-stretch">
  <header class="fixed h-[54px] w-screen bg-[white]"
    style="position: fixed; height: 54px; width: 100vw; background: white; left: 0; top: 0; z-index: 100;">
    <div class="w-full flex items-center">
      <p class="text-black">@(ViewData["Title"])</p>
    </div>
  </header>
  <div class="w-[200px] bg-[#101010] h-full pt-[54px] flex flex-col justify-between text-white py-[32px] px-[20px]">
    <div class="flex flex-col justify-start gap-[60px]">
      <a href="/Thi/Create" class="px-6 py-2 text-white">Thêm</a>
      <a href="/Thi/Update" class="px-6 py-2 text-white">Sửa</a>
    </div>
    <div>
      @* <p class="font-inter text-base pb-2 text-[#E7E7E7] font-light">Setting</p>
      <p class="font-inter text-base pb-2 text-[#E7E7E7] font-light">Log out</p> *@
      @Html.Raw(!string.IsNullOrEmpty(HttpContextAccessor.HttpContext?.Session.GetString("UserId"))
            ? "<a href='/account/logout'>Đăng xuất</a>"
            : "<a href='/account/signin'>Đăng nhập</a>")
    </div>
  </div>
  <div class="bg-[#232323] w-[calc(100vw-200px)] h-full min-h-screen md:rounded-s-[32px]">
    <div class="px-[32px] py-[32px] text-white">
      @RenderBody()
    </div>
  </div>
  @await Html.PartialAsync("_AddSongs", new Nhaccuatoi.Models.UploadSongModel())
  @await Html.PartialAsync("_UpdateSong", new Nhaccuatoi.Models.UpdateSongModel())
</div>
<footer class="flex gap-4 items-center">
  <p class="">Nhóm 13</p>
  <p class="">Bùi Anh Tuấn</p>
  <p class="">Vũ Việt Hưng</p>
  <p class="">Lương Minh Thái</p>
</footer>

<script>
  const listUI = document.getElementById("song-display")
  const nameAno = document.getElementById("name-ano")
  const singerAno = document.getElementById("singer-ano")
  const yearAno = document.getElementById("year-ano")
  const mp3Ano = document.getElementById("mp3-ano")
  const imgAno = document.getElementById("img-ano")
  const desAno = document.getElementById("des-ano")
  function renderSongList(songs) {
    console.log(songs)
    const listUI = document.getElementById("song-display");

    const html = songs.map((song) => `
    <tr>
      <th scope="row">${song.Id}</th>
      <td>
        <img src="${song.Image}" alt="Ảnh bài hát"
          class="rounded shadow-sm object-cover object-center w-[45px] h-[45px] ml-[8px]" />
      </td>
      <td class="fw-semibold">${song.Name}</td>
      <td>${song.Singer}</td>
      <td>${song.Album?.Title ?? ''}</td>
      <td>${song.Genre?.Name ?? ''}</td>
      <td>${song.ReleasedYear}</td>
      <td>${song.PlayCount}</td>
      <td class="text-start line-clamp-4" style="max-width: 200px;">${song.Description}</td>
      <td>
        <audio controls style="width: 150px;">
          <source src="${song.Source}" type="audio/mpeg">
          Trình duyệt không hỗ trợ!
        </audio>
      </td>
      <td>
        <i class="cursor-pointer fa-solid fa-pen-to-square p-2 rounded-full bg-blue-500 text-white"
                  data-song='${JSON.stringify(song)}' onclick="openModalUpdateSong(this)"></i>
        <i class="fa-solid fa-trash p-2 rounded-full bg-red-700 text-white" onclick="removeSong(${song.Id})"></i>
      </td>
    </tr>
  `).join('');

    listUI.innerHTML = html;
  }

  async function addSong(formData) {
    try {
      const response = await fetch('/Thi/UploadSong', {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        const result = await response.json();
        renderSongList(result)
        closeModalAddSong();
        formAdd.reset();
      } else {
        const result = await response.json();
        nameAno.innerHTML = (result.Name || []).join("\n")
        singerAno.innerHTML = (result.Singer || []).join("\n")
        yearAno.innerHTML = (result.ReleasedYear || []).join("\n")
        mp3Ano.innerHTML = (result.AudioFile || []).join("\n")
        imgAno.innerHTML = (result.ImageFile || []).join("\n")
        desAno.innerHTML = (result.Description || []).join("\n")
      }
    } catch (err) {
      console.error(err);
      alert("Bạn không phải là Admin");
    }
  }

  async function updateSong(id, data) {
    try {
      const response = await fetch(`/Thi/UploadSong/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          Name: data.Name,
          Singer: data.Singer,
          ReleasedYear: data.ReleasedYear,
          Description: data.Description
        })
      });
      if (response.ok) {
        const result = await response.json();
        renderSongList(result)
        closeModalUpdateSong();
        formUpdate.reset();
      } else {
        const result = await response.json();
        nameAno.innerHTML = (result.Name || []).join("\n")
        singerAno.innerHTML = (result.Singer || []).join("\n")
        yearAno.innerHTML = (result.ReleasedYear || []).join("\n")
        desAno.innerHTML = (result.Description || []).join("\n")
      }
    } catch (err) {
      console.error(err);
      alert("Bạn không phải là Admin");
    }
  }

  async function removeSong(id) {
    try {
      const response = await fetch(`/Thi/UploadSong/${id}`, {
        method: 'DELETE',
      });
      if (response.ok) {
        const result = await response.json();
        renderSongList(result)
      } else {
        alert("Lỗi khi xoá bài hát.");
      }
    } catch (err) {
      alert("Bạn không phải là Admin");
    }
  }
</script>